# This model uses a Multilinear tensor activation for the comparator.
# A Train constructor needs dataset, model, algorithm, extension
# and a save path.
!obj:pylearn2.train.Train {
    dataset: &train !include 'res/experiments/train_bowman_dataset.yaml',
    # An MLP constructor needs layers, batch_size,
    # input_space, input_source, target_source, layer_name, monitor_targets
    model: !obj:pylearn2.models.mlp.MLP {
        layers: [
            !obj:pylearn2.sandbox.nlp.models.mlp.ProjectionLayer {
                layer_name: 'projection',
                dim: 25,
                irange: 0.01, # NOTE: This could be set to 0.05
            },
            !include 'res/experiments/tb_optional_layer.yaml',
            !obj:pylearn2/models.mlp.CompositeLayer {
                layer_name: 'Composite_layer',
                layers: [
                    !include 'res/experiments/tb_NTN_layer.yaml',
                    !include 'res/experiments/tb_symmetric_NN_layer.yaml',
                    !include 'res/experiments/tb_symmetric_NN_layer.yaml',
                ],
            },
            !obj:pylearn2.models.mlp.Softmax {
                layer_name: 'y',
                n_classes: &chromaticity 3,
                irange: 0.01,
            },
        ],
        input_space: !obj:pylearn2.space.CompositeSpace {
            components: [
                    !obj:pylearn2.space.IndexSpace {
                        dim: 1,
                        max_labels: &vertex_count 3217,
                        dtype: &DTYPE 'int32'
                    },
                    !obj:pylearn2.space.IndexSpace {
                        dim: 1,
                        max_labels: *vertex_count,
                        dtype: *DTYPE,
                    }
            ],
        },
        input_source: [ 'left_input', 'right_input' ],
        target_source: [ 'target' ],
    },
    algorithm: !include 'res/experiments/train_bowman_learning_algorithm.yaml',
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
            channel_name: 'valid_y_misclass',
            save_path: '${PYLEARN2_TRAIN_FILE_FULL_STEM}_best.pkl',
        },
    ],
    save_path: '${PYLEARN2_TRAIN_FILE_FULL_STEM}.pkl',
    save_freq: 1,
}
